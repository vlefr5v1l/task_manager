name: Task Management CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black

      - name: Lint with Ruff
        run: |
          ruff check .

      - name: Format with Black
        run: |
          black --check .

  test:
    needs: lint
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_task_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio

      - name: Test with pytest
        run: |
          pytest -v
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_task_management
          POSTGRES_PORT: 5432
          SECRET_KEY: testsecretkey
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/task-management:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/task-management:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/task-management:buildcache,mode=max


#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
#
#    steps:
#      - name: Deploy to server
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.DEPLOY_HOST }}
#          username: ${{ secrets.DEPLOY_USER }}
#          key: ${{ secrets.DEPLOY_KEY }}
#          script: |
#            cd /path/to/project
#            docker-compose pull
#            docker-compose up -d