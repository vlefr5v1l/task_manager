version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: task_management_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-task_management}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: task_management_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    container_name: task_management_kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=MkU3OEVBNTcwNTJENDM2Qk
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - backend

  app:
    build: .
    container_name: task_management_api
    command: bash -c "
      echo 'Waiting for PostgreSQL...' &&
      while ! nc -z postgres 5432; do sleep 0.1; done &&
      echo 'PostgreSQL started' &&
      alembic upgrade head &&
      uv run uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload "
    volumes:
      - .:/app
    ports:
      - "${APP_PORT:-8000}:8000"
    env_file:
      - .env.example
    environment:
      - POSTGRES_SERVER=postgres
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - backend

  worker:
    build: .
    container_name: task_management_worker
    command: celery -A src.worker.celery_app worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env.example
    environment:
      - POSTGRES_SERVER=postgres
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: task_management_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - backend

  tests:
    build: .
    command: bash -c "
      echo 'Waiting for PostgreSQL...' &&
      while ! nc -z postgres 5432; do sleep 0.1; done &&
      echo 'PostgreSQL started' &&
      PGPASSWORD=${POSTGRES_PASSWORD} psql -h postgres -U ${POSTGRES_USER} -c 'CREATE DATABASE test_task_management;' || true &&
      POSTGRES_DB=test_task_management alembic upgrade head &&
      python -m tests.setup_test_db &&
      pytest -xvs
      "
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env.example
    environment:
      - POSTGRES_SERVER=postgres
      - POSTGRES_DB=test_task_management
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
